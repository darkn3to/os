#include <vector>
#include <queue>
#include <unordered_set>
#include <iostream>
#include <unordered_map>
#include <climits>
using namespace std;
int pageFaults(vector<int> pages, int n, int capacity) {
	unordered_set<int> s;
	unordered_map<int, int> indexes;
	int page_faults = 0;
	for (int i=0; i<n; i++) {
		if (s.size() < capacity) {
			if (s.find(pages[i])==s.end()) {
				s.insert(pages[i]);
				page_faults++;
			}
			indexes[pages[i]] = i;
		}
		else {
			if (s.find(pages[i]) == s.end()) {
				int lru = INT_MAX, val;
				for (auto it=s.begin(); it!=s.end(); it++) {
					if (indexes[*it] < lru) {
						lru = indexes[*it];
						val = *it;
					}
				}
				s.erase(val);
				s.insert(pages[i]);
				page_faults++;
			}
			indexes[pages[i]] = i;
		}
	}
	return page_faults;
}
int main() {
	int capacity, n;
	cout << "Enter number of frames available: ";
	cin >> capacity;
	cout << "Enter number of requests: ";
	cin >> n;
	TCS-502 | Operating Systems
	vector<int> pages(n);
	cout << "Enter the page requests: ";
	for (int i = 0; i < n; i++) {
		cin >> pages[i];
	}
	int result = pageFaults(pages, n, capacity);
	cout << "Total number of page faults: " << result << endl;
	return 0;
}