#include <iostream>
#include <vector>
#include <algorithm>
#define MAXTRACKS 200

using namespace std;

// Function to calculate total seek time using C-LOOK
int clook(int n, vector<int>& requests, int currHead) {
    int totalSeek = 0;
    vector<bool> reqCompleted(n, false);
    int completed = 0;

    // Sort the requests for proper circular movement
    sort(requests.begin(), requests.end());

    cout << "Seek sequence: ";
    while (completed < n) {
        int nextReq = -1;

        // Find the nearest request >= current head
        for (int j = 0; j < n; j++) {
            if (!reqCompleted[j] && requests[j] >= currHead) {
                nextReq = j;
                break; // Since requests are sorted, stop at the first match
            }
        }

        if (nextReq != -1) {
            totalSeek += requests[nextReq] - currHead;
            currHead = requests[nextReq];
            reqCompleted[nextReq] = true;
            completed++;
            cout << currHead << " ";
        } else {
            // Jump to the smallest request (circular wrap)
            for (int j = 0; j < n; j++) {
                if (!reqCompleted[j]) {
                    totalSeek += (MAXTRACKS - 1 - currHead) + requests[j];
                    currHead = requests[j];
                    break;
                }
            }
        }
    }
    cout << endl;
    return totalSeek;
}

int main() {
    int n;
    cout << "Enter the number of disk requests: ";
    cin >> n;

    vector<int> requests(n);
    cout << "Enter the disk requests: ";
    for (int i = 0; i < n; i++) {
        cin >> requests[i];
        if (requests[i] >= MAXTRACKS || requests[i] < 0) {
            cerr << "Error: Requested track is out of range." << endl;
            return 1;
        }
    }

    int currHead;
    cout << "Enter the current head position: ";
    cin >> currHead;

    int totalSeek = clook(n, requests, currHead);
    cout << "Total seek movement: " << totalSeek << endl;

    return 0;
}
