#include <iostream> 
#include <unordered_set>  
#include <vector> 
#include <queue> 
using namespace std;  
 
int pageFaults(vector<int> pages, int n, int capacity) {  
    unordered_set<int> s;  
    queue<int> indexes;  
    int pf = 0;  
    for (int i=0; i<n; i++) {  
        if (s.size() < capacity) {  
            if (s.find(pages[i])==s.end()) {  
                s.insert(pages[i]);  
                pf++;  
                indexes.push(pages[i]);  
            }  
        }   
        else {  
            if (s.find(pages[i]) == s.end()) {  
                int val = indexes.front();  
                indexes.pop();  
                s.erase(val);  
                s.insert(pages[i]);  
                indexes.push(pages[i]);  
                pf++;  
            }  
        }  
    }  
    return pf;  
} 
 
int main() { 
    int capacity, n; 
    cout << "Enter number of frames available: "; 
    cin >> capacity; 
    cout << "Enter number of requests: "; 
    cin >> n; 
    vector<int> pages(n); 
    cout << "Enter the page requests: "; 

    for (int i = 0; i < n; i++) {
	cin >> pages[i];
    }
    int result = pageFaults(pages, n, capacity);
    cout << "Total number of page faults: " << result << endl;
    return 0;
}