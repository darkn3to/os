#include <iostream>
#include <unordered_set> 
#include <vector>
#include <queue>
using namespace std; 
int pageFaults(vector<int> pages, int n, int capacity) 
{ 
	unordered_set<int> s; 
	queue<int> indexes; 
	int pf = 0; 
	for (int i=0; i<n; i++) { 
		if (s.size() < capacity) { 
			if (s.find(pages[i])==s.end()) { 
				s.insert(pages[i]); 
				pf++; 
				indexes.push(pages[i]); 
			} 
		}  
		else { 
			if (s.find(pages[i]) == s.end()) { 
				int val = indexes.front(); 
				indexes.pop(); 
				s.erase(val); 
				s.insert(pages[i]); 
				indexes.push(pages[i]); 
				pf++; 
			} 
		} 
		
	} 
	while (!indexes.empty()) {
			cout << indexes.front() << " ";
			indexes.pop();
	}
	return pf; 
} 
int main() { 
	vector<int> pages = {2,3,2,1,5,2,4,5,3,2,5,2}; 
	int capacity = 3; 
	cout << pageFaults(pages, pages.size(), capacity) << endl; 
	return 0; 
} 
