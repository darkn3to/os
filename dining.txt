#include <iostream>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#include <vector>

#define NUM_PHILOSOPHERS 5

int limits[NUM_PHILOSOPHERS] = {3, 3, 3, 3, 3}; 
sem_t forks[NUM_PHILOSOPHERS]; 

void* philosopher(void* num) {
    int id = *(int*)num;

    while (limits[id]) {  
        std::cout << "Philosopher " << id << " is thinking." << std::endl;
        sleep(1.5);  

        sem_wait(&forks[id]);
        sem_wait(&forks[(id + 1) % NUM_PHILOSOPHERS]);
        std::cout << "Philosopher " << id << " is eating." << std::endl;
        sleep(1.5);  
        sem_post(&forks[(id + 1) % NUM_PHILOSOPHERS]);
        sem_post(&forks[id]);
        limits[id]--;
    }
    std::cout << "Philosopher " << id << " has finished eating." << std::endl; // Completion message
    return nullptr;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int philosopher_ids[NUM_PHILOSOPHERS];

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&forks[i], 0, 1);  
        philosopher_ids[i] = i;  
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_create(&philosophers[i], NULL, philosopher, (void*)&philosopher_ids[i]);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&forks[i]);
    }

    return 0;
}
